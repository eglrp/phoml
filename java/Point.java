/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package photogrammetrie;

public class Point {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Point(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Point obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      photoJNI.delete_Point(swigCPtr);
    }
    swigCPtr = 0;
  }

  public Point() {
    this(photoJNI.new_Point__SWIG_0(), true);
  }

  public Point(double x, double y, double z) {
    this(photoJNI.new_Point__SWIG_1(x, y, z), true);
  }

  public double get_X() {
    return photoJNI.Point_get_X(swigCPtr, this);
  }

  public double get_Y() {
    return photoJNI.Point_get_Y(swigCPtr, this);
  }

  public double get_Z() {
    return photoJNI.Point_get_Z(swigCPtr, this);
  }

  public double get_dX() {
    return photoJNI.Point_get_dX(swigCPtr, this);
  }

  public double get_dY() {
    return photoJNI.Point_get_dY(swigCPtr, this);
  }

  public double get_dZ() {
    return photoJNI.Point_get_dZ(swigCPtr, this);
  }

  public Point get_dXYZ() {
    return new Point(photoJNI.Point_get_dXYZ(swigCPtr, this), true);
  }

  public Point(Point A) {
    this(photoJNI.new_Point__SWIG_2(Point.getCPtr(A), A), true);
  }

  public void set_X(double x) {
    photoJNI.Point_set_X(swigCPtr, this, x);
  }

  public void set_Y(double y) {
    photoJNI.Point_set_Y(swigCPtr, this, y);
  }

  public void set_Z(double z) {
    photoJNI.Point_set_Z(swigCPtr, this, z);
  }

  public void set_dX(double x) {
    photoJNI.Point_set_dX(swigCPtr, this, x);
  }

  public void set_dY(double y) {
    photoJNI.Point_set_dY(swigCPtr, this, y);
  }

  public void set_dZ(double z) {
    photoJNI.Point_set_dZ(swigCPtr, this, z);
  }

  public double Quad() {
    return photoJNI.Point_Quad(swigCPtr, this);
  }

  public double Betrag() {
    return photoJNI.Point_Betrag(swigCPtr, this);
  }

  public Point Norm() {
    return new Point(photoJNI.Point_Norm(swigCPtr, this), true);
  }

  public double Abstand(Point B) {
    return photoJNI.Point_Abstand(swigCPtr, this, Point.getCPtr(B), B);
  }

  public Point Add(Point B) {
    return new Point(photoJNI.Point_Add(swigCPtr, this, Point.getCPtr(B), B), true);
  }

  public Point Subt(Point B) {
    return new Point(photoJNI.Point_Subt(swigCPtr, this, Point.getCPtr(B), B), true);
  }

  public double Mult(Point B) {
    return photoJNI.Point_Mult(swigCPtr, this, Point.getCPtr(B), B);
  }

  public Point MultS(double t) {
    return new Point(photoJNI.Point_MultS(swigCPtr, this, t), true);
  }

  public Point DivS(double t) {
    return new Point(photoJNI.Point_DivS(swigCPtr, this, t), true);
  }

  public Point SpatP(Point B) {
    return new Point(photoJNI.Point_SpatP(swigCPtr, this, Point.getCPtr(B), B), true);
  }

  public Point Rotation(Point X0, SWIGTYPE_p_Matrix R) {
    return new Point(photoJNI.Point_Rotation(swigCPtr, this, Point.getCPtr(X0), X0, SWIGTYPE_p_Matrix.getCPtr(R)), true);
  }

  public Point RotationRueck(Point X0, SWIGTYPE_p_Matrix R) {
    return new Point(photoJNI.Point_RotationRueck(swigCPtr, this, Point.getCPtr(X0), X0, SWIGTYPE_p_Matrix.getCPtr(R)), true);
  }

}
