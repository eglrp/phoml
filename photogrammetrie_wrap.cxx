/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "Basics/point.h"
#include "Photo/bpoint.h"
#include "Photo/cam.h"
#include "Photo/forward_intersection.h"
#include "Photo/Vorwaertsschnitt_java.h"
#include "Photo/CBPointList.h"
#include <vector>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1Point_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Point *)new Point();
  *(Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1Point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (Point *)new Point(arg1,arg2,arg3);
  *(Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_delete_1Point(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Point *arg1 = (Point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Point **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Point_1get_1X(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  result = (double)((Point const *)arg1)->get_X();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Point_1get_1Y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  result = (double)((Point const *)arg1)->get_Y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Point_1get_1Z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  result = (double)((Point const *)arg1)->get_Z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Point_1get_1dX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  result = (double)((Point const *)arg1)->get_dX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Point_1get_1dY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  result = (double)((Point const *)arg1)->get_dY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Point_1get_1dZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  result = (double)((Point const *)arg1)->get_dZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Point_1get_1dXYZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  result = ((Point const *)arg1)->get_dXYZ();
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1Point_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point *arg1 = 0 ;
  Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point const & reference is null");
    return 0;
  } 
  result = (Point *)new Point((Point const &)*arg1);
  *(Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_Point_1set_1X(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_X(arg2);
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_Point_1set_1Y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_Y(arg2);
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_Point_1set_1Z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_Z(arg2);
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_Point_1set_1dX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_dX(arg2);
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_Point_1set_1dY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_dY(arg2);
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_Point_1set_1dZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_dZ(arg2);
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Point_1Quad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  result = (double)(arg1)->Quad();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Point_1Betrag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  result = (double)(arg1)->Betrag();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Point_1Norm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  result = (arg1)->Norm();
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Point_1Abstand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  Point *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point **)&jarg1; 
  arg2 = *(Point **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point const & reference is null");
    return 0;
  } 
  result = (double)(arg1)->Abstand((Point const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Point_1Add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  Point *arg2 = 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point **)&jarg1; 
  arg2 = *(Point **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point const & reference is null");
    return 0;
  } 
  result = (arg1)->Add((Point const &)*arg2);
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Point_1Subt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  Point *arg2 = 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point **)&jarg1; 
  arg2 = *(Point **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point const & reference is null");
    return 0;
  } 
  result = (arg1)->Subt((Point const &)*arg2);
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Point_1Mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  Point *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point **)&jarg1; 
  arg2 = *(Point **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point const & reference is null");
    return 0;
  } 
  result = (double)(arg1)->Mult((Point const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Point_1MultS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->MultS(arg2);
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Point_1DivS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->DivS(arg2);
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Point_1SpatP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  Point *arg2 = 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point **)&jarg1; 
  arg2 = *(Point **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point const & reference is null");
    return 0;
  } 
  result = (arg1)->SpatP((Point const &)*arg2);
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Point_1Rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  Point *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point **)&jarg1; 
  arg2 = *(Point **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point & reference is null");
    return 0;
  } 
  arg3 = *(Matrix **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix & reference is null");
    return 0;
  } 
  result = (arg1)->Rotation(*arg2,*arg3);
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Point_1RotationRueck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  Point *arg1 = (Point *) 0 ;
  Point *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point **)&jarg1; 
  arg2 = *(Point **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point & reference is null");
    return 0;
  } 
  arg3 = *(Matrix **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix & reference is null");
    return 0;
  } 
  result = (arg1)->RotationRueck(*arg2,*arg3);
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1BPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cam *arg1 = 0 ;
  BPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cam & reference is null");
    return 0;
  } 
  result = (BPoint *)new BPoint(*arg1);
  *(BPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1BPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  Cam *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  BPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cam & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (BPoint *)new BPoint(*arg1,arg2,arg3);
  *(BPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1BPoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  Cam *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  BPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cam & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (BPoint *)new BPoint(*arg1,arg2,arg3,arg4);
  *(BPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_BPoint_1set_1mnPixKoo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  BPoint *arg1 = (BPoint *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->set_mnPixKoo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_BPoint_1set_1xyBKoo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  BPoint *arg1 = (BPoint *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->set_xyBKoo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_BPoint_1set_1XYZObjKoo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  BPoint *arg1 = (BPoint *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->set_XYZObjKoo(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1BPoint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BPoint *arg1 = 0 ;
  BPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BPoint const & reference is null");
    return 0;
  } 
  result = (BPoint *)new BPoint((BPoint const &)*arg1);
  *(BPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1Cam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  Cam result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  result = (arg1)->get_Cam();
  *(Cam **)&jresult = new Cam((Cam &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1Cam_1Ref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  Cam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  {
    Cam &_result_ref = (arg1)->get_Cam_Ref();
    result = (Cam *) &_result_ref;
  }
  *(Cam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1m(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  result = (double)((BPoint const *)arg1)->get_m();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1n(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  result = (double)((BPoint const *)arg1)->get_n();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1X(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  result = (double)((BPoint const *)arg1)->get_X();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1Y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  result = (double)((BPoint const *)arg1)->get_Y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1Z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  result = (double)((BPoint const *)arg1)->get_Z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1Point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  result = (arg1)->get_Point();
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1xyBKooKorr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  result = (arg1)->get_xyBKooKorr();
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1xyBKoo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BPoint **)&jarg1; 
  result = (arg1)->get_xyBKoo();
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_BPoint_1get_1KernlinenPunkt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jlong jresult = 0 ;
  BPoint *arg1 = (BPoint *) 0 ;
  Cam *arg2 = 0 ;
  double arg3 ;
  SwigValueWrapper<BPoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BPoint **)&jarg1; 
  arg2 = *(Cam **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cam & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (arg1)->get_KernlinenPunkt(*arg2,arg3);
  *(BPoint **)&jresult = new BPoint((BPoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_delete_1BPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BPoint *arg1 = (BPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BPoint **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1Cam_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Cam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Cam *)new Cam();
  *(Cam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1Cam_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11, jdouble jarg12, jdouble jarg13, jdouble jarg14, jdouble jarg15, jdouble jarg16, jdouble jarg17, jdouble jarg18, jdouble jarg19, jdouble jarg20) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  double arg17 ;
  double arg18 ;
  double arg19 ;
  double arg20 ;
  Cam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  arg13 = (double)jarg13; 
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  arg17 = (double)jarg17; 
  arg18 = (double)jarg18; 
  arg19 = (double)jarg19; 
  arg20 = (double)jarg20; 
  result = (Cam *)new Cam(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  *(Cam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_delete_1Cam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Cam *arg1 = (Cam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Cam **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1Cam_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cam *arg1 = 0 ;
  Cam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cam const & reference is null");
    return 0;
  } 
  result = (Cam *)new Cam((Cam const &)*arg1);
  *(Cam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1pix_1row(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_pix_row();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1pix_1col(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_pix_col();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1pix_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_pix_size();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1O(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  Point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (arg1)->get_O();
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1OX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_OX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1OY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_OY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1OZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_OZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1rotX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_rotX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1rotY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_rotY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1rotZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_rotZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_c();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1xh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_xh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1yh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_yh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1A1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_A1();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1A2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_A2();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1A3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_A3();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1B1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_B1();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1B2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_B2();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1C1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_C1();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1C2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_C2();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_photogrammetrie_photoJNI_Cam_1get_1r0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  result = (double)(arg1)->get_r0();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_Cam_1set_1rotX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cam *arg1 = (Cam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_rotX(arg2);
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_Cam_1set_1rotY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cam *arg1 = (Cam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_rotY(arg2);
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_Cam_1set_1rotZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cam *arg1 = (Cam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_rotZ(arg2);
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_Cam_1set_1O(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cam *arg1 = (Cam *) 0 ;
  Point arg2 ;
  Point *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cam **)&jarg1; 
  argp2 = *(Point **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_O(arg2);
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Cam_1TransInRellativeOrientierung(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  Cam *arg2 = 0 ;
  Cam *arg3 = 0 ;
  Cam *arg4 = 0 ;
  Cam *arg5 = 0 ;
  Matrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Cam **)&jarg1; 
  arg2 = *(Cam **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cam & reference is null");
    return 0;
  } 
  arg3 = *(Cam **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cam & reference is null");
    return 0;
  } 
  arg4 = *(Cam **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cam & reference is null");
    return 0;
  } 
  arg5 = *(Cam **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cam & reference is null");
    return 0;
  } 
  result = (arg1)->TransInRellativeOrientierung(*arg2,*arg3,*arg4,*arg5);
  *(Matrix **)&jresult = new Matrix((Matrix &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_photogrammetrie_photoJNI_Cam_1read_1from_1ini(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->read_from_ini((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_photogrammetrie_photoJNI_Cam_1write_1in_1ini(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  Cam *arg1 = (Cam *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cam **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->write_in_ini((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1CBPointList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBPointList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBPointList *)new CBPointList();
  *(CBPointList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_delete_1CBPointList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBPointList *arg1 = (CBPointList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBPointList **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_CBPointList_1addBPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBPointList *arg1 = (CBPointList *) 0 ;
  SwigValueWrapper<BPoint > arg2 ;
  BPoint *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBPointList **)&jarg1; 
  argp2 = *(BPoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BPoint");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->addBPoint(arg2);
}


SWIGEXPORT jint JNICALL Java_photogrammetrie_photoJNI_CBPointList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CBPointList *arg1 = (CBPointList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBPointList **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_CBPointList_1clearBPointList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBPointList *arg1 = (CBPointList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBPointList **)&jarg1; 
  (arg1)->clearBPointList();
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_CBPointList_1m_1BPoint_1List_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CBPointList *arg1 = (CBPointList *) 0 ;
  vector<BPoint > *arg2 = (vector<BPoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBPointList **)&jarg1; 
  arg2 = *(vector<BPoint > **)&jarg2; 
  if (arg1) (arg1)->m_BPoint_List = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_CBPointList_1m_1BPoint_1List_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBPointList *arg1 = (CBPointList *) 0 ;
  vector<BPoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBPointList **)&jarg1; 
  result = (vector<BPoint > *)& ((arg1)->m_BPoint_List);
  *(vector<BPoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_new_1Vorwaertsschnitt_1java(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Vorwaertsschnitt_java *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Vorwaertsschnitt_java *)new Vorwaertsschnitt_java();
  *(Vorwaertsschnitt_java **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_Vorwaertsschnitt_1java_1calc_1vorwaertsschnitt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vorwaertsschnitt_java *arg1 = (Vorwaertsschnitt_java *) 0 ;
  CBPointList arg2 ;
  Point result;
  CBPointList *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vorwaertsschnitt_java **)&jarg1; 
  argp2 = *(CBPointList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CBPointList");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->calc_vorwaertsschnitt(arg2);
  *(Point **)&jresult = new Point((Point &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_photogrammetrie_photoJNI_delete_1Vorwaertsschnitt_1java(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Vorwaertsschnitt_java *arg1 = (Vorwaertsschnitt_java *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Vorwaertsschnitt_java **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_photogrammetrie_photoJNI_SWIGBPointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Point **)&baseptr = *(BPoint **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

